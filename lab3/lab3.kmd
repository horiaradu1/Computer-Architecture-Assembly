KMD
00000000: EA00007C    ;         B part3 ; part1 or part2 or part3
00000004:             ; 
00000004: 00 00 00 00 ; buffer  DEFS 100,0
00000008: 00 00 00 00 ; 
0000000C: 00 00 00 00 ; 
00000010: 00 00 00 00 ; 
00000014: 00 00 00 00 ; 
00000018: 00 00 00 00 ; 
0000001C: 00 00 00 00 ; 
00000020: 00 00 00 00 ; 
00000024: 00 00 00 00 ; 
00000028: 00 00 00 00 ; 
0000002C: 00 00 00 00 ; 
00000030: 00 00 00 00 ; 
00000034: 00 00 00 00 ; 
00000038: 00 00 00 00 ; 
0000003C: 00 00 00 00 ; 
00000040: 00 00 00 00 ; 
00000044: 00 00 00 00 ; 
00000048: 00 00 00 00 ; 
0000004C: 00 00 00 00 ; 
00000050: 00 00 00 00 ; 
00000054: 00 00 00 00 ; 
00000058: 00 00 00 00 ; 
0000005C: 00 00 00 00 ; 
00000060: 00 00 00 00 ; 
00000064: 00 00 00 00 ; 
00000068:             ; 
00000068: 6F 6E 65 00 ; s1      DEFB "one\0"
0000006C:             ;         ALIGN
0000006C: 74 77 6F 00 ; s2      DEFB "two\0"
00000070:             ;         ALIGN
00000070: 74 68 72 65 ; s3      DEFB "three\0"
00000074: 65 00       ; 
00000078:             ;         ALIGN
00000078: 66 6F 75 72 ; s4      DEFB "four\0"
0000007C: 00          ; 
00000080:             ;         ALIGN
00000080: 66 69 76 65 ; s5      DEFB "five\0"
00000084: 00          ; 
00000088:             ;         ALIGN
00000088: 73 69 78 00 ; s6      DEFB "six\0"
0000008C:             ;         ALIGN
0000008C: 73 65 76 65 ; s7      DEFB "seven\0"
00000090: 6E 00       ; 
00000094:             ;         ALIGN
00000094: 74 77 65 6E ; s8      DEFB "twentytwo\0"
00000098: 74 79 74 77 ; 
0000009C: 6F 00       ; 
000000A0:             ;         ALIGN
000000A0: 74 77 65 6E ; s9      DEFB "twenty\0"
000000A4: 74 79 00    ; 
000000A8:             ;         ALIGN
000000A8:             ; 
000000A8:             ; ;************************** part 1 **************************
000000A8:             ; printstring
000000A8: E4D10001    ; loop1   LDRB  R0, [R1], #1
000000AC: E3500000    ;         CMP  R0, #0
000000B0: 1F000000    ;         SVCNE 0
000000B4: 1AFFFFFB    ;         BNE  loop1
000000B8:             ; ; your code goes here, replacing the previous 2 lines
000000B8: E3A0000A    ;         MOV  R0, #10    ; given - output end-of-line
000000BC: EF000000    ;         SVC  0          ; given
000000C0: E1A0F00E    ;         MOV  PC, LR     ; given
000000C4:             ; 
000000C4:             ; ;************************** part 2 ***************************
000000C4:             ; strcat
000000C4: E5F10001    ; loop3   LDRB R0, [R1,#1]!
000000C8: E3500000    ;         CMP R0, #0
000000CC: 1AFFFFFC    ;         BNE loop3
000000D0: E4D20001    ; loop4   LDRB  R0, [R2], #1
000000D4: E4C10001    ;         STRB  R0, [R1], #1
000000D8: E3500000    ;         CMP R0, #0
000000DC: 1AFFFFFB    ;         BNE loop4
000000E0: E1A0F00E    ;         MOV  PC, LR
000000E4:             ; 
000000E4:             ; strcpy
000000E4: E4D20001    ; loop2   LDRB  R0, [R2], #1
000000E8: E4C10001    ;         STRB  R0, [R1], #1
000000EC: E3500000    ;         CMP R0, #0
000000F0: 1AFFFFFB    ;         BNE loop2       
000000F4: E1A0F00E    ;         MOV  PC, LR
000000F8:             ; 
000000F8:             ; ;************************** part 3 **************************
000000F8: E58FE028    ; sorted  STR LR, return2 ; given
000000FC: E4D24001    ; loop5   LDRB R4, [R2], #1
00000100: E4D35001    ;         LDRB R5, [R3], #1
00000104: E1540005    ;         CMP R4, R5
00000108: 1A000004    ;         BNE stop
0000010C: E3540000    ;         CMP R4, #0
00000110: 0A000002    ;         BEQ stop
00000114: E3550000    ;         CMP R5, #0
00000118: 0A000000    ;         BEQ stop
0000011C: EAFFFFF6    ;         B loop5
00000120:             ; stop    
00000120: E1540005    ;         CMP R4, R5
00000124: E51FF004    ;         LDR  PC, return2 ; given
00000128: 00000000    ; return2 DEFW 0          ; given
0000012C:             ; 
0000012C:             ; ;*********************** the various parts ********************
0000012C: E24F10CC    ; part1   ADR R1, s1
00000130: EBFFFFDC    ;         BL  printstring
00000134: E24F10D0    ;         ADR R1, s2
00000138: EBFFFFDA    ;         BL  printstring
0000013C: E24F10D4    ;         ADR R1, s3
00000140: EBFFFFD8    ;         BL  printstring
00000144: E24F10D4    ;         ADR R1, s4
00000148: EBFFFFD6    ;         BL  printstring
0000014C: E24F10D4    ;         ADR R1, s5
00000150: EBFFFFD4    ;         BL  printstring
00000154: E24F10D4    ;         ADR R1, s6
00000158: EBFFFFD2    ;         BL  printstring
0000015C: E24F10D8    ;         ADR R1, s7
00000160: EBFFFFD0    ;         BL  printstring
00000164: E24F10D8    ;         ADR R1, s8
00000168: EBFFFFCE    ;         BL  printstring
0000016C: E24F10D4    ;         ADR R1, s9
00000170: EBFFFFCC    ;         BL  printstring
00000174: EF000002    ;         SVC 2
00000178:             ; 
00000178: E24F2F46    ; part2   ADR R2, s1
0000017C: E24F1D06    ;         ADR R1, buffer
00000180: EBFFFFD7    ;         BL  strcpy
00000184: E24F1F62    ;         ADR R1, buffer
00000188: EBFFFFC6    ;         BL  printstring
0000018C: E24F2F4A    ;         ADR R2, s2
00000190: E24F1F65    ;         ADR R1, buffer
00000194: EBFFFFCA    ;         BL  strcat
00000198: E24F1F67    ;         ADR R1, buffer
0000019C: EBFFFFC1    ;         BL  printstring
000001A0: E24F2F4E    ;         ADR R2, s3
000001A4: E24F1F6A    ;         ADR R1, buffer
000001A8: EBFFFFC5    ;         BL  strcat
000001AC: E24F1E1B    ;         ADR R1, buffer
000001B0: EBFFFFBC    ;         BL  printstring
000001B4: EF000002    ;         SVC 2
000001B8:             ; 
000001B8:             ; ; used by part3
000001B8: 00000000    ; return4 DEFW 0,0
000001BC: 00000000    ; 
000001C0: E50FE010    ; test2   STR LR, return4         ; This mechanism will be improved later
000001C4: E50F3010    ;         STR R3, return4+4       ; Assembler will evaluate addition      
000001C8: E1A00002    ;         MOV R0, R2
000001CC: EF000003    ;         SVC 3
000001D0: EBFFFFC8    ;         BL  sorted
000001D4: B3A0003C    ;         MOVLT R0, #'<'          ; Three-way IF using conditions
000001D8: 03A0003D    ;         MOVEQ R0, #'='
000001DC: C3A0003E    ;         MOVGT R0, #'>'
000001E0: EF000000    ;         SVC 0
000001E4: E51F0030    ;         LDR R0, return4+4
000001E8: EF000003    ;         SVC 3
000001EC: E3A0000A    ;         MOV R0, #10
000001F0: EF000000    ;         SVC 0
000001F4: E51FF044    ;         LDR PC, return4
000001F8:             ; 
000001F8: E24F2F66    ; part3   ADR R2, s1
000001FC: E24F3F66    ;         ADR R3, s2
00000200: EBFFFFEE    ;         BL  test2
00000204: E24F2E1A    ;         ADR R2, s2
00000208: E24F3E1A    ;         ADR R3, s3
0000020C: EBFFFFEB    ;         BL  test2
00000210: E24F2F6A    ;         ADR R2, s3
00000214: E24F3F69    ;         ADR R3, s4
00000218: EBFFFFE8    ;         BL  test2
0000021C: E24F2F6B    ;         ADR R2, s4
00000220: E24F3F6A    ;         ADR R3, s5
00000224: EBFFFFE5    ;         BL  test2
00000228: E24F2E1B    ;         ADR R2, s5
0000022C: E24F3F6B    ;         ADR R3, s6
00000230: EBFFFFE2    ;         BL  test2
00000234: E24F2F6D    ;         ADR R2, s6
00000238: E24F3F6D    ;         ADR R3, s7
0000023C: EBFFFFDF    ;         BL  test2
00000240: E24F2F6F    ;         ADR R2, s7
00000244: E24F3F6E    ;         ADR R3, s8
00000248: EBFFFFDC    ;         BL  test2
0000024C: E24F2D07    ;         ADR R2, s8
00000250: E24F3F6E    ;         ADR R3, s9
00000254: EBFFFFD9    ;         BL  test2
00000258: E24F2F73    ;         ADR R2, s8
0000025C: E24F3E1D    ;         ADR R3, s8
00000260: EBFFFFD6    ;         BL  test2
00000264: EF000002    ;         SVC 2
00000268:             ; 

Symbol Table: Labels
: buffer                            00000004  Local -- ARM
: s1                                00000068  Local -- ARM
: s2                                0000006C  Local -- ARM
: s3                                00000070  Local -- ARM
: s4                                00000078  Local -- ARM
: s5                                00000080  Local -- ARM
: s6                                00000088  Local -- ARM
: s7                                0000008C  Local -- ARM
: s8                                00000094  Local -- ARM
: s9                                000000A0  Local -- ARM
: printstring                       000000A8  Local -- ARM
: loop1                             000000A8  Local -- ARM
: strcat                            000000C4  Local -- ARM
: loop3                             000000C4  Local -- ARM
: loop4                             000000D0  Local -- ARM
: strcpy                            000000E4  Local -- ARM
: loop2                             000000E4  Local -- ARM
: sorted                            000000F8  Local -- ARM
: loop5                             000000FC  Local -- ARM
: stop                              00000120  Local -- ARM
: return2                           00000128  Local -- ARM
: part1                             0000012C  Local -- ARM
: part2                             00000178  Local -- ARM
: return4                           000001B8  Local -- ARM
: test2                             000001C0  Local -- ARM
: part3                             000001F8  Local -- ARM
